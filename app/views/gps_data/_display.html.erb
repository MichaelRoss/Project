<script src="https://www.google.com/jsapi"></script>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
    <script src="https://maps.googleapis.com/maps/api/js?libraries=geometry&sensor=false"></script>
    <script>
      var elevator;
      var map;
      var chart;
      var infowindow = new google.maps.InfoWindow();
      var polyline;
      var path;
      var points = [];

      //gets lat and lng points from database
      <% @g.each do |gps| %>
        var point<%=gps.id%> = new google.maps.LatLng(<%=gps.lat%>,<%=gps.lng%>)
        points.push(point<%=gps.id%>)
      <%end%>
    


      // Load the Visualization API and the columnchart package.
      google.load('visualization', '1', {packages: ['corechart']});

      function initialize() {

        var latlngbounds = new google.maps.LatLngBounds();

        for ( var i = 0; i<points.length; i++)
        {
            latlngbounds.extend(points[i])
        }

        var mapProp = {
        center: new google.maps.LatLng(<%=(@g.first.lat+@g.last.lat)/2%>,<%=(@g.first.lng+@g.last.lng)/2%>),
          mapTypeId:google.maps.MapTypeId.ROADMAP
         };
      

       map=new google.maps.Map(document.getElementById("map-canvas"),mapProp);

       map.fitBounds(latlngbounds);

        // Create an ElevationService.
        elevator = new google.maps.ElevationService();

        // Draw the path, using the Visualization API and the Elevation service.
        drawPath();
        setMarkers();
        calcSpeed();
      }

      function drawPath() {

        // Create a new chart in the elevation_chart DIV.
        chart = new google.visualization.ComboChart(document.getElementById('elevation_chart'));

        path = [<%@g.each_with_index do |gps,index|%><%if index +1 != @g.length%>point<%=gps.id%>,<%end%><%end%>point<%=@g.last.id%>]
        calcTotalTime();
        calcDistance(path);
        // Create a PathElevationRequest object using this array.
        // Ask for 256 samples along that path.
        var pathRequest = {
          'path': path,
          'samples': 200
        }

        // Initiate the path request.
        elevator.getElevationAlongPath(pathRequest, plotElevation);
      }

      // Takes an array of ElevationResult objects, draws the path on the map
      // and plots the elevation profile on a Visualization API ColumnChart.
      function plotElevation(results, status) {
        if (status == google.maps.ElevationStatus.OK) {
          elevations = results;

          // Extract the elevation samples from the returned results
          // and store them in an array of LatLngs.
          var elevationPath = [];
          for (var i = 0; i < results.length; i++) {
            elevationPath.push(elevations[i].location);
          }

          // Display a polyline of the elevation path.
          var pathOptions = {
            path: elevationPath,
            strokeColor: '#0000CC',
            opacity: 0.4,
            map: map
          }
          polyline = new google.maps.Polyline(pathOptions);

          // Extract the data from which to populate the chart.
          // Because the samples are equidistant, the 'Sample'
          // column here does double duty as distance along the
          // X axis.
          var data = new google.visualization.DataTable();
          data.addColumn('string', 'Sample');
          data.addColumn('number', 'Elevation');
          data.addColumn('number', 'Marker');
          
          var m;
          var minElevation = 10000;

          for (var i = 0; i < elevations.length; i++)
          {
            if(elevations[i].elevation < minElevation)
            {
              minElevation = elevations[i].elevation;
            }
          }

          for (var i = 0; i < elevations.length; i++) {
            for(var j = 0; j < path.length; j++){
              if(google.maps.geometry.spherical.computeDistanceBetween(elevations[i].location,path[j]) <2)
              {
               
                data.addRow(['', elevations[i].elevation,elevations[i].elevation] );
                
              }
              else
              {
                m = null;
              }

            }
            data.addRow(['', elevations[i].elevation,m] );
          }

          var options = {
          legend: "none",
          title : 'Elevation Chart',
          vAxis: {title: "Elevation(m)",
                  minValue: minElevation-1},
          seriesType: "line",
          series: {1: {type: "bars"}}
          };

          // Draw the chart using the data within its DIV.

          chart.draw(data, options);
        }
      }

      function setMarkers()
      {
        <% @g.each do |gps| %>
        var marker<%=gps.id%>=new google.maps.Marker({
            position:point<%=gps.id%>,
        });

        marker<%=gps.id%>.setMap(map);
        <%end%>
      }

      function calcTotalTime()
      {
        var time = <%=@g.last.time - @g.first.time %>/60;

        time = time.toFixed(2);


        document.getElementById('test1').innerHTML = "Time Taken: " + time +"mins";

      }


      function calcDistance(path)
      {
        var dist = google.maps.geometry.spherical.computeLength(path);
        dist = (dist/1000).toFixed(2);
        document.getElementById('test').innerHTML = "Total Distance Walked: " + dist + "km";
      }

      function calcSpeed()
      {
          var speed;
          var distance = [];
          var time = [];
          chart1 = new google.visualization.ComboChart(document.getElementById('speed_chart'));
          var data = new google.visualization.DataTable();

          data.addColumn('string', 'Time');
          data.addColumn('number', 'Speed');

          <%@g.each_with_index do |gps,index|%>
              <%if index+1 != @g.length%>
              <%next_value = @g.to_a[index+1]%>
              time.push(<%=(next_value.time - gps.time)%>);
              <%end%>
            <%end%>


          for(var i = 0; i <path.length-1; i++){
            distance.push(google.maps.geometry.spherical.computeDistanceBetween(path[i],path[i+1]));
          
            speed = distance[i]/time[i];
            data.addRow(['',speed]);
            
          }

          var options = {
            legend: "none",
            title : 'Speed Chart',
            vAxis: {title: "Speed"},
            seriesType: "bars",
          };

          // Draw the chart using the data within its DIV.

          chart1.draw(data, options);

      }
    </script>


  <body onload="initialize();">
    <div align = "center">
      Map of Movements
      <div id="map-canvas" style="position:relative;width:640px; height:400px; border: 1px solid black;"></div>
      <%if current_user.roles.first.name == "GP" %>
        <% $visible = "show" %>
      <%else%>
        <% $visible = "hidden" %>
      <%end%>

        <div id="elevation_chart" style="width:640px; height:200px; visibility:"<%=$visible%>></div>
        <div id="speed_chart" style="width:640px; height:200px; visibility:"<%=$visible%>></div>
      <p id="test">Blah</p>
      <p id="test1">Blah</p>
    </div>
  </body>